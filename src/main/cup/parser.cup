package com.daniel;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.Set;
import com.daniel.controller.Tree.*;
import com.daniel.controller.Conjuntos.*;
import com.daniel.controller.Errors.*;
import com.daniel.controller.CheckStrings.*;

parser code {:

    public int operatorNodeCounter;
    public int nodeCounter;

    public ArrayList<Conjunto> Conjuntos = new ArrayList<Conjunto>();
    public ArrayList<Tree> Trees = new ArrayList<Tree>();
    public ArrayList<CheckString> CheckStrings = new ArrayList<CheckString>();
    public ArrayList<String> elementos = new ArrayList<String>();


    // Lista de errores
    public ArrayList<ExceptionReport> Errors = new ArrayList<ExceptionReport>();

    public void syntax_error(Symbol s){
        Errors.add(new ExceptionReport("Sintactico", "Error de sintaxis detectado. Se detecto: " + s.value, s.left + "", s.right + ""));
        }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error sintactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
            }
            public ArrayList<ExceptionReport> getErrores(){
                return Errors;
            }
:}


terminal String CONJ, LBRACE, RBRACE, COLON, BODY_ARROW, HEAD_ARROW, PERCENT, DOT, STAR, PLUS;
terminal String QUERY, PIPE, TILDE;
terminal String COMMA, SEMICOLON, ESCAPE_SEQUENCE;
terminal String LOWERCASE, UPPERCASE, IDENTIFIER, DIGIT, STRING_LITERAL,ASCII;

non terminal Begin, BodyEntry;
non terminal ConjBody, ConjDef;
non terminal String ConjNotation;
non terminal String RangeExp;
non terminal String IndExp, MoreIndExp;
non terminal String UnitSymbol;
non terminal CheckBody, CheckLine;

non terminal ExpBody, ExpLine;
non terminal Node RegExp;
non terminal String AsciiGroup;

start with Begin;

// Definimos la sección para la declaración de la gramática
Begin ::=LBRACE BodyEntry RBRACE;

BodyEntry ::= ConjBody ExpBody PERCENT CheckBody;

// Definimos la sección para los conjuntos de regex
ConjBody ::= ConjDef ConjBody | ConjDef;

ConjDef ::= CONJ COLON IDENTIFIER:id BODY_ARROW HEAD_ARROW ConjNotation:notation SEMICOLON {:
Conjunto conjunto = new Conjunto(id);
if(notation.contains("~")){
    conjunto.type = "RANGE";
}else{
    conjunto.type = "IND";
}
conjunto.elements = elementos;
elementos = new ArrayList<String>();
Conjuntos.add(conjunto);

:};

ConjNotation ::= RangeExp:range {:
RESULT = range;
:}
|IndExp:ind {:
RESULT = ind;
:};

RangeExp ::= LOWERCASE:l1 TILDE LOWERCASE:l2 {:
elementos.add(l1);
elementos.add(l2);
RESULT = l1 + "~" + l2;

:}
| UPPERCASE:u1 TILDE UPPERCASE:u2 {:
elementos.add(u1);
elementos.add(u2);
RESULT = u1 + "~" + u2;
:}
| DIGIT:d1 TILDE DIGIT:d2 {:
elementos.add(d1);
elementos.add(d2);
RESULT = d1 + "~" + d2;
:}
| AsciiGroup:a1 TILDE AsciiGroup:a2 {:
elementos.add(a1);
elementos.add(a2);
RESULT = a1 + "~" + a2;
:}
;

IndExp ::=  UnitSymbol:u MoreIndExp:m {:
RESULT = u + m;
:} | UnitSymbol:u {:
RESULT = u;
:};

MoreIndExp ::= COMMA:c UnitSymbol:u MoreIndExp:m {:
RESULT = c + u + m;
:} | COMMA:c UnitSymbol:u {:
RESULT = c + u;
:};

UnitSymbol ::=
LOWERCASE:l {:
elementos.add(l);
RESULT = l; :}
| UPPERCASE:u {:
elementos.add(u);
 RESULT = u; :}
| DIGIT:d {:
elementos.add(d);
 RESULT = d; :}
| AsciiGroup:a {:
elementos.add(a);
RESULT = a; :};

AsciiGroup ::= ASCII:a {:
RESULT = a;
:}
|DOT:dot {:
RESULT = dot;
:}
|STAR:star {:
RESULT = star;
:}
|PLUS:plus {:
RESULT = plus;
:}
|QUERY:query {:
RESULT = query;
:}
|LBRACE:lbrace {:
RESULT = lbrace;
:}
|RBRACE:rbrace {:
RESULT = rbrace;
:}
|COLON:colon {:
RESULT = colon;
:}
|COMMA:comma {:
RESULT = comma;
:}
|SEMICOLON:semi {:
RESULT = semi;
:}
|PIPE:pipe {:
RESULT = pipe;
:}
|BODY_ARROW:body {:
RESULT = body;
:}
|HEAD_ARROW:head {:
RESULT = head;
:}
|PERCENT:percent {:
RESULT = percent;
:}
;

// Definimos la sección para la asignación de expresiones regulares a conjuntos
ExpBody ::= ExpLine ExpBody | ExpLine ;

ExpLine ::= IDENTIFIER:id BODY_ARROW HEAD_ARROW RegExp:val SEMICOLON {:
    Trees.add(new Tree(val, id, operatorNodeCounter, nodeCounter));
    operatorNodeCounter = 0;
    nodeCounter = 0;
:};

RegExp ::= PIPE RegExp:pipe1 RegExp:pipe2 {:
    operatorNodeCounter++;
    RESULT = new Node("|",NodeType.OR, operatorNodeCounter,pipe1, pipe2);
:}
| DOT RegExp:dot1 RegExp:dot2 {:
operatorNodeCounter++;
RESULT = new Node(".",NodeType.AND, operatorNodeCounter,dot1, dot2);
:}
| PLUS RegExp:plus {:
operatorNodeCounter++;
RESULT = new Node("+",NodeType.PLUS, operatorNodeCounter,plus);
:}
| STAR RegExp:star {:
operatorNodeCounter++;
RESULT = new Node("*",NodeType.STAR, operatorNodeCounter,star);
:}
| QUERY RegExp:query {:
operatorNodeCounter++;
RESULT = new Node("?",NodeType.QUERY, operatorNodeCounter,query);
:}
| LBRACE IDENTIFIER:id RBRACE {:
nodeCounter++;
Conjunto conjuntoEncontrado = null;

for (Conjunto conjunto : Conjuntos) {
    if (conjunto.identifier.equals(id)) {
        conjuntoEncontrado = conjunto;
        break;
    }
}

try {
    if (conjuntoEncontrado == null) {
        throw new Exception("El conjunto " + id + " no ha sido declarado.");
    }
} catch (Exception e) {
    Errors.add(new ExceptionReport("Semantico", e.getMessage(), "", ""));
    return null;
}

RESULT = new Node(conjuntoEncontrado, NodeType.LEAVE, nodeCounter);
:} | STRING_LITERAL:val {:
nodeCounter++;
RESULT = new Node(val, NodeType.LEAVE, nodeCounter);
:} | ESCAPE_SEQUENCE:val {:
nodeCounter++;
RESULT = new Node(val, NodeType.LEAVE, nodeCounter);
:};

// Definimos la sección para las cadenas a evaluar
CheckBody ::= CheckLine CheckBody | CheckLine;

CheckLine ::= IDENTIFIER:id COLON STRING_LITERAL:s {:
CheckStrings.add(new CheckString(id, s));
:} SEMICOLON;



