/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.daniel.view;
import com.daniel.analizadores.*;
import com.daniel.controller.CheckStrings.CheckString;
import com.daniel.controller.DFA.DFA;
import com.daniel.controller.Errors.ExceptionReport;
import com.daniel.controller.Tree.Tree;
import com.daniel.model.ManageFile;
import com.daniel.model.ReportGraphviz;
import com.daniel.model.ReportHTML;
import com.daniel.model.ReportJSON;
import com.daniel.parser;

import java.awt.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author daniel
 */
public class MainMenu extends javax.swing.JFrame {

    /**
     * Creates new form MainMenu
     */
    
    private File currentFile;
    private boolean isSaved = false;
    private ArrayList<ExceptionReport> errors = new ArrayList<>();
    private ArrayList<DFA> dfas = new ArrayList<>();
    private ArrayList<CheckString> checkStrings = new ArrayList<>();
    //private Tree currentTree = null;

    // Rutas de los reportes
    private final String reportAFD = "src/reports/AFD_202112145/";
    private final String reportAFND = "src/reports/AFND_202112145/";
    private final String reportARBOLES = "src/reports/ARBOLES_202112145/";
    private final String reportSIGUIENTES = "src/reports/SIGUIENTES_202112145/";
    private final String reportTRANSICIONES = "src/reports/TRANSICIONES_202112145/";


    public MainMenu() {
        initComponents();
        this.SelectRegex.setEnabled(false);
        this.ShowDFAAttr.setEnabled(false);
        this.AnalyzeStrings.setEnabled(false);
        this.setAttrFromTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TextEditor = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        Console = new javax.swing.JTextArea();
        AnalyzeStrings = new javax.swing.JButton();
        SelectRegex = new javax.swing.JComboBox<>();
        SelectRegexLabel = new javax.swing.JLabel();
        ShowAttrLabel = new javax.swing.JLabel();
        ShowDFAAttr = new javax.swing.JComboBox<>();
        ImageScrollPanel = new javax.swing.JScrollPane();
        ImagePanel = new javax.swing.JPanel();
        DisplayAttr = new javax.swing.JLabel();
        MainMenuBar = new javax.swing.JMenuBar();
        FileOptions = new javax.swing.JMenu();
        NewFile = new javax.swing.JMenuItem();
        OpenFile = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        SaveAs = new javax.swing.JMenuItem();
        GenerateDFA = new javax.swing.JMenuItem();


        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(100, 600));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        TextEditor.setColumns(20);
        TextEditor.setRows(5);
        TextEditor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextEditorKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(TextEditor);

        Console.setColumns(20);
        Console.setRows(5);
        Console.setEnabled(false);
        jScrollPane2.setViewportView(Console);

        AnalyzeStrings.setText("Analizar cadenas");
        AnalyzeStrings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalyzeStringsActionPerformed(evt);
            }
        });

        ImagePanel.add(DisplayAttr, java.awt.BorderLayout.CENTER);

        SelectRegexLabel.setText("Expresiones regulares reconocidas");
        ImagePanel.setLayout(new java.awt.BorderLayout());
        ImageScrollPanel.add(ImagePanel);

        ShowAttrLabel.setText("Ver");

        ShowDFAAttr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowDFAAttrActionPerformed(evt);
            }
        });


        SelectRegex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectRegexActionPerformed(evt);
            }
        });


        FileOptions.setText("File");

        NewFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        NewFile.setText("Nuevo Archivo");
        NewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewFileActionPerformed(evt);
            }
        });
        FileOptions.add(NewFile);

        OpenFile.setText("Abrir Archivo");
        OpenFile.setToolTipText("");
        OpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileActionPerformed(evt);
            }
        });
        FileOptions.add(OpenFile);

        Save.setText("Guardar");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        FileOptions.add(Save);

        SaveAs.setText("Guardar Como");
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });
        FileOptions.add(SaveAs);

        GenerateDFA.setText("Generar Aut√≥mata");
        GenerateDFA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateDFAActionPerformed(evt);
            }
        });
        FileOptions.add(GenerateDFA);

        MainMenuBar.add(FileOptions);

        setJMenuBar(MainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(AnalyzeStrings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(SelectRegexLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SelectRegex, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ShowAttrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ShowDFAAttr, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(ImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 500, javax.swing.GroupLayout.DEFAULT_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AnalyzeStrings)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SelectRegexLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SelectRegex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ShowAttrLabel)
                        .addGap(5, 5, 5)
                        .addComponent(ShowDFAAttr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(ImagePanel)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileActionPerformed
        String desktopPath = System.getProperty("user.home") + "/Desktop/";
        JFileChooser fileChooser = new JFileChooser(desktopPath);
        fileChooser.setFileFilter(new FileNameExtensionFilter("OLC files (*.olc)", "olc"));
        int selection = fileChooser.showOpenDialog(null);
        if (selection == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            this.currentFile = file;
            
            this.setTitle("Archivo "+ file.getName());
            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);
                
    String line;
    while ((line = br.readLine()) != null) {
        this.TextEditor.append(line + "\n");
        
    }
    br.close();
} catch (IOException e) {
    // Maneja cualquier error de lectura del archivo
}
        }
    }//GEN-LAST:event_OpenFileActionPerformed

    private void saveFile() {
    if (currentFile == null) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("OLC Files", "olc");
        fileChooser.setFileFilter(filter);

        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();
            if (!filePath.endsWith(".olc")) {
                selectedFile = new File(filePath + ".olc");
            }
            currentFile = selectedFile;
        } else {
            return;
        }
    }

    try (BufferedWriter writer = new BufferedWriter(new FileWriter(currentFile))) {
        String text = this.TextEditor.getText();
        writer.write(text);
        isSaved = true;
        setTitle(currentFile.getName() + " - OLC Editor");
    } catch (IOException e) {
        e.printStackTrace();
    }
}
    
    private void saveAsFile(){
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar archivo como...");
    fileChooser.setCurrentDirectory(new File("."));
    int userSelection = fileChooser.showSaveDialog(this);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();
        if (fileToSave.exists()) {
            int response = JOptionPane.showConfirmDialog(this, "El archivo ya existe. ¬øDesea reemplazarlo?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {
                saveAsFile();
                return;
            }
        }
        try {
            FileWriter writer = new FileWriter(fileToSave);
            this.TextEditor.write(writer);
            writer.close();
            isSaved = true;
            currentFile = fileToSave;
            setTitle("Mi editor de texto - " + currentFile.getName());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    }
    
    public void newFile() {
    if (!isSaved && this.currentFile != null) {
        int option = JOptionPane.showConfirmDialog(null, "¬øDesea guardar el archivo actual?", "Nuevo archivo", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (option == JOptionPane.YES_OPTION) {
            saveFile();
        } else if (option == JOptionPane.CANCEL_OPTION) {
            return;
        }
    }
    this.TextEditor.setText("");
    currentFile = null;
    isSaved = false;
    this.setTitle("Nuevo archivo");
    }
    
    private void generateDFA(){
        if (this.currentFile == null) {
            JOptionPane.showMessageDialog(this, "No hay un archivo abierto", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String lines = this.TextEditor.getText();
        if (lines.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El archivo est√° vac√≠o", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ExreganLexer lexer = new ExreganLexer(new StringReader(lines));
        parser p = new parser(lexer);
        try {
        p.parse();
        if (p.Errors.size() > 0 || lexer.errors.size() > 0) {
                JOptionPane.showMessageDialog(this, "El archivo contiene errores", "Error", JOptionPane.ERROR_MESSAGE);
                this.errors.addAll(p.Errors);
                this.errors.addAll(lexer.errors);
                ReportHTML report = new ReportHTML();
                String name = this.currentFile.getName().contains(".") ? this.currentFile.getName().substring(0, this.currentFile.getName().lastIndexOf(".")) : this.currentFile.getName();
                report.generateHTMLReport(this.errors, name);
                return;
        }
        if (!p.CheckStrings.isEmpty()){
            this.checkStrings = p.CheckStrings;
            this.AnalyzeStrings.setEnabled(true);
        } else {
            this.AnalyzeStrings.setEnabled(false);
        }
        setRegexIntoComboBox(p.Trees);

    } catch (Exception e) {
        this.Console.setText(e.getMessage());
    }
        
    }

    private void setRegexIntoComboBox(ArrayList<Tree> trees) throws IOException {
        if (trees.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay expresiones regulares", "Error", JOptionPane.ERROR_MESSAGE);
            this.SelectRegex.setEnabled(false);
            return;
        }
        ReportGraphviz reportGraphviz = new ReportGraphviz();
        for (Tree t : trees) {
            this.SelectRegex.addItem(t.NameRegex);
            this.dfas.add(t.afd);
            ManageFile.generateGraphvizFile(this.reportARBOLES + t.NameRegex, reportGraphviz.generateTreeGraph(t.Root, t.NameRegex));
            ManageFile.generateGraphvizFile(this.reportAFND + t.NameRegex, reportGraphviz.generateAFND(t.afnd));
            ManageFile.generateGraphvizFile(this.reportAFD + t.NameRegex, reportGraphviz.generateAFD(t.afd));
            ManageFile.generateGraphvizFile(this.reportSIGUIENTES + t.NameRegex, reportGraphviz.generateFollowTable(t.followTable, t.NameRegex));
            ManageFile.generateGraphvizFile(this.reportTRANSICIONES + t.NameRegex, reportGraphviz.generateTransitionTable(t.transitionTable));
        }
        this.SelectRegex.setEnabled(true);
        this.ShowDFAAttr.setEnabled(true);
        this.displayCurrentTree(this.ShowDFAAttr.getSelectedItem().toString());
    }

    private void setAttrFromTree(){
        this.ShowDFAAttr.addItem("√Årbol");
        this.ShowDFAAttr.addItem("Tabla de siguientes");
        this.ShowDFAAttr.addItem("Tabla de transiciones");
        this.ShowDFAAttr.addItem("AFD");
        this.ShowDFAAttr.addItem("AFND");
    }

    private void displayCurrentTree(String attr){
        switch (attr) {
            case "√Årbol" -> this.displayTree();
            case "Tabla de siguientes" -> this.displayFollowTable();
            case "Tabla de transiciones" -> this.displayTransitionTable();
            case "AFD" -> this.displayAFD();
            case "AFND" -> this.displayAFND();
            default -> {
            }
        }
    }

    private void setScaleImage(String path){
        ImageIcon imageIcon = new ImageIcon(path);
        Image image = imageIcon.getImage();
/*
// Obtener las dimensiones originales de la imagen
        int originalWidth = image.getWidth(null);
        int originalHeight = image.getHeight(null);

// Obtener la relaci√≥n de aspecto de la imagen
        double aspectRatio = (double) originalWidth / originalHeight;

// Establecer el tama√±o m√°ximo de la imagen
        int maxWidth = 200;
        int maxHeight = 200;

// Escalar la imagen en funci√≥n de la relaci√≥n de aspecto
        int newWidth = (int) (maxHeight * aspectRatio);
        int newHeight = maxHeight;

        if (newWidth > maxWidth) {
            newWidth = maxWidth;
            newHeight = (int) (maxWidth / aspectRatio);
        }


        Image scaled = image.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);*/
        DisplayAttr.setIcon(new ImageIcon(image));

        // Permitir scroll si es necesario
        DisplayAttr.setPreferredSize(new Dimension(imageIcon.getIconWidth(), imageIcon.getIconHeight()));
        JScrollPane scrollPane = new JScrollPane(DisplayAttr);
        scrollPane.setPreferredSize(new Dimension(200, 200));

        // Reemplazar el contenido anterior del panel por el nuevo JScrollPane
        ImagePanel.removeAll();
        ImagePanel.add(scrollPane);
        ImagePanel.revalidate();
        ImagePanel.repaint();

    }
    
    private void displayTree(){
        String regex = this.SelectRegex.getSelectedItem().toString();
        String path = this.reportARBOLES + regex + ".png";
        setScaleImage(path);
    }

    private void displayFollowTable(){
        String regex = this.SelectRegex.getSelectedItem().toString();
        String path = this.reportSIGUIENTES + regex + ".png";
        setScaleImage(path);
    }

    private void displayTransitionTable(){
        String regex = this.SelectRegex.getSelectedItem().toString();
        String path = this.reportTRANSICIONES + regex + ".png";
        setScaleImage(path);
    }

    private void displayAFD(){
        String regex = this.SelectRegex.getSelectedItem().toString();
        String path = this.reportAFD + regex + ".png";
        setScaleImage(path);
    }

    private void displayAFND(){
        String regex = this.SelectRegex.getSelectedItem().toString();
        String path = this.reportAFND + regex + ".png";
        setScaleImage(path);
    }

    private void analyzeStrings(){
        if (this.currentFile == null) {
            JOptionPane.showMessageDialog(this, "No hay un archivo abierto", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (this.checkStrings.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay cadenas para analizar", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ReportJSON reportJSON = new ReportJSON();
        String name = this.currentFile.getName().contains(".") ? this.currentFile.getName().substring(0, this.currentFile.getName().lastIndexOf(".")) : this.currentFile.getName();
        String content = reportJSON.generateStringsEvaluation(this.dfas, this.checkStrings);
        String reportSALIDAS = "src/reports/SALIDAS_202112145/";
        ManageFile.WriteFiles(reportSALIDAS + name + ".json", content);

    }

    private void SelectRegexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectRegexActionPerformed
        // TODO add your handling code here:
        if (this.SelectRegex.getSelectedItem() == null) {
            return;
        }
        this.displayCurrentTree(this.ShowDFAAttr.getSelectedItem().toString());
    }//GEN-LAST:event_SelectRegexActionPerformed

    private void ShowDFAAttrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowDFAAttrActionPerformed
        // TODO add your handling code here:
        if (this.SelectRegex.getSelectedItem() == null) {
            return;
        }
        this.displayCurrentTree(this.ShowDFAAttr.getSelectedItem().toString());
    }//GEN-LAST:event_ShowDFAAttrActionPerformed


    
    private void NewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewFileActionPerformed
        // TODO add your handling code here:
       newFile();
    }//GEN-LAST:event_NewFileActionPerformed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formKeyTyped

    private void TextEditorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextEditorKeyReleased
        // TODO add your handling code here:
        this.isSaved = false;
        if (this.currentFile != null){
            this.setTitle(this.currentFile.getName() + " (sin guardar)");
        }
    }//GEN-LAST:event_TextEditorKeyReleased

    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed
        // TODO add your handling code here:
        saveAsFile();
    }//GEN-LAST:event_SaveAsActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        saveFile();
    }//GEN-LAST:event_SaveActionPerformed

    private void GenerateDFAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateDFAActionPerformed
        // TODO add your handling code here:
        generateDFA();
    }//GEN-LAST:event_GenerateDFAActionPerformed

    private void AnalyzeStringsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalyzeStringsActionPerformed
        // TODO add your handling code here:
        analyzeStrings();
    }//GEN-LAST:event_AnalyzeStringsActionPerformed

    private void SelectShowAttrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectShowAttActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SelectShowAttActionPerformed

   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnalyzeStrings;
    private javax.swing.JTextArea Console;
    private javax.swing.JLabel DisplayAttr;
    private javax.swing.JMenu FileOptions;
    private javax.swing.JMenuItem GenerateDFA;
    private javax.swing.JScrollPane ImageScrollPanel;
    private javax.swing.JMenuBar MainMenuBar;
    private javax.swing.JMenuItem NewFile;
    private javax.swing.JMenuItem OpenFile;
    private javax.swing.JMenuItem Save;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JComboBox<String> SelectRegex;
    private javax.swing.JLabel SelectRegexLabel;
    private javax.swing.JLabel ShowAttrLabel;
    private javax.swing.JComboBox<String> ShowDFAAttr;
    private javax.swing.JTextArea TextEditor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel ImagePanel;
    // End of variables declaration//GEN-END:variables
}
