
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.daniel;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.Set;
import com.daniel.controller.Tree.*;
import com.daniel.controller.Conjunto.*;
import com.daniel.controller.Errors.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\004\004\000\002\004\003\000\002\005\011" +
    "\000\002\006\003\000\002\006\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\010\004\000\002\010\003\000\002\011" +
    "\005\000\002\011\004\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\015\004\000" +
    "\002\015\003\000\002\016\007\000\002\017\005\000\002" +
    "\017\005\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\005\000\002\017\003\000\002\017\003" +
    "\000\002\013\004\000\002\013\003\000\002\014\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\005\005\001\002\000\004\002\130\001" +
    "\002\000\004\004\007\001\002\000\004\006\127\001\002" +
    "\000\004\007\054\001\002\000\006\004\007\026\ufffd\001" +
    "\002\000\004\026\013\001\002\000\006\012\uffde\026\013" +
    "\001\002\000\004\010\025\001\002\000\004\012\015\001" +
    "\002\000\004\026\017\001\002\000\004\006\uffff\001\002" +
    "\000\004\007\022\001\002\000\006\006\uffd3\026\017\001" +
    "\002\000\004\006\uffd4\001\002\000\004\030\023\001\002" +
    "\000\004\022\024\001\002\000\006\006\uffd2\026\uffd2\001" +
    "\002\000\004\011\026\001\002\000\022\005\027\013\035" +
    "\014\033\015\034\016\031\017\030\023\036\030\032\001" +
    "\002\000\004\026\050\001\002\000\022\005\027\013\035" +
    "\014\033\015\034\016\031\017\030\023\036\030\032\001" +
    "\002\000\022\005\027\013\035\014\033\015\034\016\031" +
    "\017\030\023\036\030\032\001\002\000\024\005\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6\023\uffd6" +
    "\030\uffd6\001\002\000\022\005\027\013\035\014\033\015" +
    "\034\016\031\017\030\023\036\030\032\001\002\000\022" +
    "\005\027\013\035\014\033\015\034\016\031\017\030\023" +
    "\036\030\032\001\002\000\022\005\027\013\035\014\033" +
    "\015\034\016\031\017\030\023\036\030\032\001\002\000" +
    "\024\005\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\022\uffd5\023\uffd5\030\uffd5\001\002\000\004\022\040\001" +
    "\002\000\006\012\uffdd\026\uffdd\001\002\000\022\005\027" +
    "\013\035\014\033\015\034\016\031\017\030\023\036\030" +
    "\032\001\002\000\024\005\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\022\uffdb\023\uffdb\030\uffdb\001\002\000" +
    "\024\005\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\022\uffda\023\uffda\030\uffda\001\002\000\024\005\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\022\uffd9\023\uffd9" +
    "\030\uffd9\001\002\000\024\005\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\022\uffd8\023\uffd8\030\uffd8\001\002" +
    "\000\022\005\027\013\035\014\033\015\034\016\031\017" +
    "\030\023\036\030\032\001\002\000\024\005\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\022\uffdc\023\uffdc\030" +
    "\uffdc\001\002\000\004\006\051\001\002\000\024\005\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\022\uffd7\023" +
    "\uffd7\030\uffd7\001\002\000\004\012\uffdf\001\002\000\004" +
    "\026\ufffe\001\002\000\004\026\055\001\002\000\004\010" +
    "\056\001\002\000\004\011\057\001\002\000\044\005\072" +
    "\006\065\007\073\010\075\011\060\012\063\013\100\014" +
    "\071\015\064\016\104\017\061\021\076\022\062\024\074" +
    "\025\101\027\070\031\103\001\002\000\010\020\uffe9\021" +
    "\uffe9\022\uffe9\001\002\000\010\020\uffeb\021\uffeb\022\uffeb" +
    "\001\002\000\010\020\uffec\021\uffec\022\uffec\001\002\000" +
    "\010\020\uffe8\021\uffe8\022\uffe8\001\002\000\010\020\ufff2" +
    "\021\ufff2\022\ufff2\001\002\000\010\020\uffef\021\uffef\022" +
    "\uffef\001\002\000\004\022\126\001\002\000\004\022\ufffa" +
    "\001\002\000\010\020\124\021\uffe1\022\uffe1\001\002\000" +
    "\010\020\ufff3\021\ufff3\022\ufff3\001\002\000\010\020\ufff0" +
    "\021\ufff0\022\ufff0\001\002\000\010\020\uffee\021\uffee\022" +
    "\uffee\001\002\000\010\020\122\021\uffe3\022\uffe3\001\002" +
    "\000\010\020\uffea\021\uffea\022\uffea\001\002\000\010\020" +
    "\uffed\021\uffed\022\uffed\001\002\000\010\020\120\021\uffe0" +
    "\022\uffe0\001\002\000\010\020\ufff4\021\ufff4\022\ufff4\001" +
    "\002\000\010\020\116\021\uffe2\022\uffe2\001\002\000\006" +
    "\021\106\022\uffe6\001\002\000\010\020\ufff5\021\ufff5\022" +
    "\ufff5\001\002\000\010\020\ufff1\021\ufff1\022\ufff1\001\002" +
    "\000\004\022\ufffb\001\002\000\044\005\072\006\065\007" +
    "\073\010\075\011\060\012\063\013\100\014\071\015\064" +
    "\016\104\017\061\021\076\022\062\024\111\025\113\027" +
    "\110\031\103\001\002\000\004\022\uffe7\001\002\000\006" +
    "\021\uffe1\022\uffe1\001\002\000\006\021\uffe3\022\uffe3\001" +
    "\002\000\006\021\uffe0\022\uffe0\001\002\000\006\021\uffe2" +
    "\022\uffe2\001\002\000\006\021\106\022\uffe4\001\002\000" +
    "\004\022\uffe5\001\002\000\004\025\117\001\002\000\004" +
    "\022\ufff8\001\002\000\036\005\072\006\065\007\073\010" +
    "\075\011\060\012\063\013\100\014\071\015\064\016\104" +
    "\017\061\021\076\022\062\031\103\001\002\000\004\022" +
    "\ufff6\001\002\000\004\024\123\001\002\000\004\022\ufff9" +
    "\001\002\000\004\027\125\001\002\000\004\022\ufff7\001" +
    "\002\000\006\004\ufffc\026\ufffc\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\005\004\010\005\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\052\005\007\001\001\000" +
    "\006\015\013\016\011\001\001\000\006\015\051\016\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\015\014\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\020\014\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\036\001\001\000\002\001\001\000" +
    "\004\017\045\001\001\000\004\017\044\001\001\000\002" +
    "\001\001\000\004\017\043\001\001\000\004\017\042\001" +
    "\001\000\004\017\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\065\007\104\010\066\012\101\020\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\113\020\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public int operatorNodeCounter;
    public int nodeCounter;

    public ArrayList<Conjunto> Conjuntos = new ArrayList<Conjunto>();
    public ArrayList<Tree> Trees = new ArrayList<Tree>();
    public ArrayList<String> CheckStrings = new ArrayList<String>();
    public Set<String> elementos = new HashSet<String>();


    // Lista de errores
    public ArrayList<ExceptionReport> Errors = new ArrayList<ExceptionReport>();

    public void syntax_error(Symbol s){
        Errors.add(new ExceptionReport("Sintactico", "Error de sintaxis detectado. Se detecto: " + s.value, s.left + "", s.right + ""));
        }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error sintactico irrecuperable en la L??nea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
            }
            public ArrayList<ExceptionReport> getErrores(){
                return Errors;
            }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Begin ::= LBRACE BodyEntry RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Begin",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BodyEntry ::= ConjBody ExpBody PERCENT CheckBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyEntry",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ConjBody ::= ConjDef ConjBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConjBody",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ConjBody ::= ConjDef 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConjBody",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ConjDef ::= CONJ COLON IDENTIFIER BODY_ARROW HEAD_ARROW ConjNotation SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int notationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int notationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String notation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Conjunto conjunto = new Conjunto(id);
if(notation.contains("~")){
    conjunto.type = "RANGE";
}else{
    conjunto.type = "IND";
}
conjunto.elements = elementos;
elementos = new HashSet<String>();
Conjuntos.add(conjunto);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConjDef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ConjNotation ::= RangeExp 
            {
              String RESULT =null;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = range;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConjNotation",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConjNotation ::= IndExp 
            {
              String RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int indright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ind = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = ind;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConjNotation",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RangeExp ::= LOWERCASE TILDE LOWERCASE 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
elementos.add(l1);
elementos.add(l2);
RESULT = l1 + "~" + l2;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("RangeExp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RangeExp ::= UPPERCASE TILDE UPPERCASE 
            {
              String RESULT =null;
		int u1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int u1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int u2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int u2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String u2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
elementos.add(u1);
elementos.add(u2);
RESULT = u1 + "~" + u2;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RangeExp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RangeExp ::= DIGIT TILDE DIGIT 
            {
              String RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
elementos.add(d1);
elementos.add(d2);
RESULT = d1 + "~" + d2;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RangeExp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RangeExp ::= AsciiGroup TILDE AsciiGroup 
            {
              String RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
elementos.add(a1);
elementos.add(a2);
RESULT = a1 + "~" + a2;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RangeExp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AsciiGroup ::= ASCII 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AsciiGroup ::= DOT 
            {
              String RESULT =null;
		int dotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = dot;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AsciiGroup ::= STAR 
            {
              String RESULT =null;
		int starleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int starright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String star = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = star;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AsciiGroup ::= PLUS 
            {
              String RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String plus = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = plus;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AsciiGroup ::= QUERY 
            {
              String RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String query = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = query;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AsciiGroup ::= LBRACE 
            {
              String RESULT =null;
		int lbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lbrace = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = lbrace;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AsciiGroup ::= RBRACE 
            {
              String RESULT =null;
		int rbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String rbrace = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = rbrace;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AsciiGroup ::= COLON 
            {
              String RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String colon = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = colon;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AsciiGroup ::= COMMA 
            {
              String RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String comma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = comma;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AsciiGroup ::= SEMICOLON 
            {
              String RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String semi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = semi;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AsciiGroup ::= PIPE 
            {
              String RESULT =null;
		int pipeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int piperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pipe = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = pipe;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AsciiGroup ::= BODY_ARROW 
            {
              String RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String body = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = body;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AsciiGroup ::= HEAD_ARROW 
            {
              String RESULT =null;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String head = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = head;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AsciiGroup ::= PERCENT 
            {
              String RESULT =null;
		int percentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int percentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String percent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = percent;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsciiGroup",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IndExp ::= UnitSymbol MoreIndExp 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = u + m;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IndExp ::= UnitSymbol 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = u;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndExp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MoreIndExp ::= COMMA UnitSymbol MoreIndExp 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = c + u + m;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MoreIndExp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MoreIndExp ::= COMMA UnitSymbol 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = c + u;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MoreIndExp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // UnitSymbol ::= LOWERCASE 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
elementos.add(l);
RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnitSymbol",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // UnitSymbol ::= UPPERCASE 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
elementos.add(u);
 RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnitSymbol",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // UnitSymbol ::= DIGIT 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
elementos.add(d);
 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnitSymbol",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // UnitSymbol ::= AsciiGroup 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
elementos.add(a);
RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnitSymbol",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpBody ::= ExpLine ExpBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBody",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpBody ::= ExpLine 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBody",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpLine ::= IDENTIFIER BODY_ARROW HEAD_ARROW RegExp SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Trees.add(new Tree(val, id, operatorNodeCounter, nodeCounter));
    operatorNodeCounter = 0;
    nodeCounter = 0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpLine",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RegExp ::= PIPE RegExp RegExp 
            {
              Node RESULT =null;
		int pipe1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pipe1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node pipe1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pipe2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pipe2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node pipe2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    operatorNodeCounter++;
    RESULT = new Node("|",NodeType.OR, operatorNodeCounter,pipe1, pipe2);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RegExp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RegExp ::= DOT RegExp RegExp 
            {
              Node RESULT =null;
		int dot1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dot1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node dot1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dot2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dot2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node dot2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
operatorNodeCounter++;
RESULT = new Node(".",NodeType.AND, operatorNodeCounter,dot1, dot2);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RegExp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RegExp ::= PLUS RegExp 
            {
              Node RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node plus = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
operatorNodeCounter++;
RESULT = new Node("+",NodeType.PLUS, operatorNodeCounter,plus);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RegExp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RegExp ::= STAR RegExp 
            {
              Node RESULT =null;
		int starleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int starright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node star = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
operatorNodeCounter++;
RESULT = new Node("*",NodeType.STAR, operatorNodeCounter,star);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RegExp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RegExp ::= QUERY RegExp 
            {
              Node RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node query = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
operatorNodeCounter++;
RESULT = new Node("?",NodeType.QUERY, operatorNodeCounter,query);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RegExp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RegExp ::= LBRACE IDENTIFIER RBRACE 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
nodeCounter++;
RESULT = new Node(id, NodeType.LEAVE, nodeCounter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RegExp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RegExp ::= STRING_LITERAL 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
nodeCounter++;
RESULT = new Node(val, NodeType.LEAVE, nodeCounter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RegExp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RegExp ::= ESCAPE_SEQUENCE 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
nodeCounter++;
RESULT = new Node(val, NodeType.LEAVE, nodeCounter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RegExp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CheckBody ::= CheckLine CheckBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CheckBody",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CheckBody ::= CheckLine 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CheckBody",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CheckLine ::= IDENTIFIER COLON STRING_LITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CheckLine",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
